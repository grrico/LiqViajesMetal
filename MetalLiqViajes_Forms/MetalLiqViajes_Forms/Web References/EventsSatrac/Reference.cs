//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MetalLiqViajes_Forms.EventsSatrac {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="getEventsSoap", Namespace="http://tempuri.org/")]
    public partial class getEvents : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback retrieveEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventsV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventsV3OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventStringV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventStringV3OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventStringByIDV4OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventsByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventsByIDV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventsByIDV3OperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLastEventStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventsInOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback retrieveEventsInOutStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback getItineraryDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SNAOperationCompleted;
        
        private System.Threading.SendOrPostCallback RKHOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVirtualPointByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVirtualPointEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback setMDTMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SIR_InformePosicionesGeograficasOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKilometerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKilometerStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKilometerCurrentDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKilometerCurrentDateStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegionesByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegionesByUserStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVehiclesByRegionesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVehiclesByRegionesStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerPointByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerPointByUserStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback CrearRegionDinamicasOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAlarmsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public getEvents() {
            this.Url = global::MetalLiqViajes_Forms.Properties.Settings.Default.MetalLiqViajes_Forms_com_satrack_webcloud_getEvents;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event retrieveEventsCompletedEventHandler retrieveEventsCompleted;
        
        /// <remarks/>
        public event retrieveEventsV2CompletedEventHandler retrieveEventsV2Completed;
        
        /// <remarks/>
        public event retrieveEventsV3CompletedEventHandler retrieveEventsV3Completed;
        
        /// <remarks/>
        public event retrieveEventStringCompletedEventHandler retrieveEventStringCompleted;
        
        /// <remarks/>
        public event retrieveEventStringV2CompletedEventHandler retrieveEventStringV2Completed;
        
        /// <remarks/>
        public event retrieveEventStringV3CompletedEventHandler retrieveEventStringV3Completed;
        
        /// <remarks/>
        public event retrieveEventStringByIDV4CompletedEventHandler retrieveEventStringByIDV4Completed;
        
        /// <remarks/>
        public event retrieveEventsByIDCompletedEventHandler retrieveEventsByIDCompleted;
        
        /// <remarks/>
        public event retrieveEventsByIDV2CompletedEventHandler retrieveEventsByIDV2Completed;
        
        /// <remarks/>
        public event retrieveEventsByIDV3CompletedEventHandler retrieveEventsByIDV3Completed;
        
        /// <remarks/>
        public event getLastEventCompletedEventHandler getLastEventCompleted;
        
        /// <remarks/>
        public event getLastEventStringCompletedEventHandler getLastEventStringCompleted;
        
        /// <remarks/>
        public event retrieveEventsInOutCompletedEventHandler retrieveEventsInOutCompleted;
        
        /// <remarks/>
        public event retrieveEventsInOutStringCompletedEventHandler retrieveEventsInOutStringCompleted;
        
        /// <remarks/>
        public event getItineraryDataCompletedEventHandler getItineraryDataCompleted;
        
        /// <remarks/>
        public event SNACompletedEventHandler SNACompleted;
        
        /// <remarks/>
        public event RKHCompletedEventHandler RKHCompleted;
        
        /// <remarks/>
        public event getVirtualPointByUserCompletedEventHandler getVirtualPointByUserCompleted;
        
        /// <remarks/>
        public event getVirtualPointEventsCompletedEventHandler getVirtualPointEventsCompleted;
        
        /// <remarks/>
        public event setMDTMessageCompletedEventHandler setMDTMessageCompleted;
        
        /// <remarks/>
        public event SIR_InformePosicionesGeograficasCompletedEventHandler SIR_InformePosicionesGeograficasCompleted;
        
        /// <remarks/>
        public event GetKilometerCompletedEventHandler GetKilometerCompleted;
        
        /// <remarks/>
        public event GetKilometerStringCompletedEventHandler GetKilometerStringCompleted;
        
        /// <remarks/>
        public event GetKilometerCurrentDateCompletedEventHandler GetKilometerCurrentDateCompleted;
        
        /// <remarks/>
        public event GetKilometerCurrentDateStringCompletedEventHandler GetKilometerCurrentDateStringCompleted;
        
        /// <remarks/>
        public event GetRegionesByUserCompletedEventHandler GetRegionesByUserCompleted;
        
        /// <remarks/>
        public event GetRegionesByUserStringCompletedEventHandler GetRegionesByUserStringCompleted;
        
        /// <remarks/>
        public event GetVehiclesByRegionesCompletedEventHandler GetVehiclesByRegionesCompleted;
        
        /// <remarks/>
        public event GetVehiclesByRegionesStringCompletedEventHandler GetVehiclesByRegionesStringCompleted;
        
        /// <remarks/>
        public event GetCustomerPointByUserCompletedEventHandler GetCustomerPointByUserCompleted;
        
        /// <remarks/>
        public event GetCustomerPointByUserStringCompletedEventHandler GetCustomerPointByUserStringCompleted;
        
        /// <remarks/>
        public event CrearRegionDinamicasCompletedEventHandler CrearRegionDinamicasCompleted;
        
        /// <remarks/>
        public event GetAlarmsCompletedEventHandler GetAlarmsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEvents", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet retrieveEvents(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            object[] results = this.Invoke("retrieveEvents", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventsAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            this.retrieveEventsAsync(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void retrieveEventsAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.retrieveEventsOperationCompleted == null)) {
                this.retrieveEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventsOperationCompleted);
            }
            this.InvokeAsync("retrieveEvents", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.retrieveEventsOperationCompleted, userState);
        }
        
        private void OnretrieveEventsOperationCompleted(object arg) {
            if ((this.retrieveEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventsCompleted(this, new retrieveEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsV2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet retrieveEventsV2(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            object[] results = this.Invoke("retrieveEventsV2", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventsV2Async(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            this.retrieveEventsV2Async(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void retrieveEventsV2Async(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.retrieveEventsV2OperationCompleted == null)) {
                this.retrieveEventsV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventsV2OperationCompleted);
            }
            this.InvokeAsync("retrieveEventsV2", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.retrieveEventsV2OperationCompleted, userState);
        }
        
        private void OnretrieveEventsV2OperationCompleted(object arg) {
            if ((this.retrieveEventsV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventsV2Completed(this, new retrieveEventsV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsV3", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet retrieveEventsV3(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            object[] results = this.Invoke("retrieveEventsV3", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventsV3Async(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            this.retrieveEventsV3Async(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void retrieveEventsV3Async(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.retrieveEventsV3OperationCompleted == null)) {
                this.retrieveEventsV3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventsV3OperationCompleted);
            }
            this.InvokeAsync("retrieveEventsV3", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.retrieveEventsV3OperationCompleted, userState);
        }
        
        private void OnretrieveEventsV3OperationCompleted(object arg) {
            if ((this.retrieveEventsV3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventsV3Completed(this, new retrieveEventsV3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string retrieveEventString(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            object[] results = this.Invoke("retrieveEventString", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventStringAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            this.retrieveEventStringAsync(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void retrieveEventStringAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.retrieveEventStringOperationCompleted == null)) {
                this.retrieveEventStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventStringOperationCompleted);
            }
            this.InvokeAsync("retrieveEventString", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.retrieveEventStringOperationCompleted, userState);
        }
        
        private void OnretrieveEventStringOperationCompleted(object arg) {
            if ((this.retrieveEventStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventStringCompleted(this, new retrieveEventStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventStringV2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string retrieveEventStringV2(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            object[] results = this.Invoke("retrieveEventStringV2", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventStringV2Async(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            this.retrieveEventStringV2Async(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void retrieveEventStringV2Async(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.retrieveEventStringV2OperationCompleted == null)) {
                this.retrieveEventStringV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventStringV2OperationCompleted);
            }
            this.InvokeAsync("retrieveEventStringV2", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.retrieveEventStringV2OperationCompleted, userState);
        }
        
        private void OnretrieveEventStringV2OperationCompleted(object arg) {
            if ((this.retrieveEventStringV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventStringV2Completed(this, new retrieveEventStringV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventStringV3", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string retrieveEventStringV3(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            object[] results = this.Invoke("retrieveEventStringV3", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventStringV3Async(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            this.retrieveEventStringV3Async(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void retrieveEventStringV3Async(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.retrieveEventStringV3OperationCompleted == null)) {
                this.retrieveEventStringV3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventStringV3OperationCompleted);
            }
            this.InvokeAsync("retrieveEventStringV3", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.retrieveEventStringV3OperationCompleted, userState);
        }
        
        private void OnretrieveEventStringV3OperationCompleted(object arg) {
            if ((this.retrieveEventStringV3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventStringV3Completed(this, new retrieveEventStringV3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventStringByIDV4", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string retrieveEventStringByIDV4(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg) {
            object[] results = this.Invoke("retrieveEventStringByIDV4", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        Clave,
                        NumReg});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventStringByIDV4Async(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg) {
            this.retrieveEventStringByIDV4Async(UserName, Password, PhysicalID, Events, Clave, NumReg, null);
        }
        
        /// <remarks/>
        public void retrieveEventStringByIDV4Async(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg, object userState) {
            if ((this.retrieveEventStringByIDV4OperationCompleted == null)) {
                this.retrieveEventStringByIDV4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventStringByIDV4OperationCompleted);
            }
            this.InvokeAsync("retrieveEventStringByIDV4", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        Clave,
                        NumReg}, this.retrieveEventStringByIDV4OperationCompleted, userState);
        }
        
        private void OnretrieveEventStringByIDV4OperationCompleted(object arg) {
            if ((this.retrieveEventStringByIDV4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventStringByIDV4Completed(this, new retrieveEventStringByIDV4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet retrieveEventsByID(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg) {
            object[] results = this.Invoke("retrieveEventsByID", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        Clave,
                        NumReg});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventsByIDAsync(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg) {
            this.retrieveEventsByIDAsync(UserName, Password, PhysicalID, Events, Clave, NumReg, null);
        }
        
        /// <remarks/>
        public void retrieveEventsByIDAsync(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg, object userState) {
            if ((this.retrieveEventsByIDOperationCompleted == null)) {
                this.retrieveEventsByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventsByIDOperationCompleted);
            }
            this.InvokeAsync("retrieveEventsByID", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        Clave,
                        NumReg}, this.retrieveEventsByIDOperationCompleted, userState);
        }
        
        private void OnretrieveEventsByIDOperationCompleted(object arg) {
            if ((this.retrieveEventsByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventsByIDCompleted(this, new retrieveEventsByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsByIDV2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet retrieveEventsByIDV2(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg) {
            object[] results = this.Invoke("retrieveEventsByIDV2", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        Clave,
                        NumReg});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventsByIDV2Async(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg) {
            this.retrieveEventsByIDV2Async(UserName, Password, PhysicalID, Events, Clave, NumReg, null);
        }
        
        /// <remarks/>
        public void retrieveEventsByIDV2Async(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg, object userState) {
            if ((this.retrieveEventsByIDV2OperationCompleted == null)) {
                this.retrieveEventsByIDV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventsByIDV2OperationCompleted);
            }
            this.InvokeAsync("retrieveEventsByIDV2", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        Clave,
                        NumReg}, this.retrieveEventsByIDV2OperationCompleted, userState);
        }
        
        private void OnretrieveEventsByIDV2OperationCompleted(object arg) {
            if ((this.retrieveEventsByIDV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventsByIDV2Completed(this, new retrieveEventsByIDV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsByIDV3", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet retrieveEventsByIDV3(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg) {
            object[] results = this.Invoke("retrieveEventsByIDV3", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        Clave,
                        NumReg});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventsByIDV3Async(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg) {
            this.retrieveEventsByIDV3Async(UserName, Password, PhysicalID, Events, Clave, NumReg, null);
        }
        
        /// <remarks/>
        public void retrieveEventsByIDV3Async(string UserName, string Password, string PhysicalID, string Events, long Clave, int NumReg, object userState) {
            if ((this.retrieveEventsByIDV3OperationCompleted == null)) {
                this.retrieveEventsByIDV3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventsByIDV3OperationCompleted);
            }
            this.InvokeAsync("retrieveEventsByIDV3", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        Clave,
                        NumReg}, this.retrieveEventsByIDV3OperationCompleted, userState);
        }
        
        private void OnretrieveEventsByIDV3OperationCompleted(object arg) {
            if ((this.retrieveEventsByIDV3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventsByIDV3Completed(this, new retrieveEventsByIDV3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getLastEvent(string UserName, string Password, string PhysicalID) {
            object[] results = this.Invoke("getLastEvent", new object[] {
                        UserName,
                        Password,
                        PhysicalID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getLastEventAsync(string UserName, string Password, string PhysicalID) {
            this.getLastEventAsync(UserName, Password, PhysicalID, null);
        }
        
        /// <remarks/>
        public void getLastEventAsync(string UserName, string Password, string PhysicalID, object userState) {
            if ((this.getLastEventOperationCompleted == null)) {
                this.getLastEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastEventOperationCompleted);
            }
            this.InvokeAsync("getLastEvent", new object[] {
                        UserName,
                        Password,
                        PhysicalID}, this.getLastEventOperationCompleted, userState);
        }
        
        private void OngetLastEventOperationCompleted(object arg) {
            if ((this.getLastEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastEventCompleted(this, new getLastEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLastEventString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getLastEventString(string UserName, string Password, string PhysicalID) {
            object[] results = this.Invoke("getLastEventString", new object[] {
                        UserName,
                        Password,
                        PhysicalID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getLastEventStringAsync(string UserName, string Password, string PhysicalID) {
            this.getLastEventStringAsync(UserName, Password, PhysicalID, null);
        }
        
        /// <remarks/>
        public void getLastEventStringAsync(string UserName, string Password, string PhysicalID, object userState) {
            if ((this.getLastEventStringOperationCompleted == null)) {
                this.getLastEventStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLastEventStringOperationCompleted);
            }
            this.InvokeAsync("getLastEventString", new object[] {
                        UserName,
                        Password,
                        PhysicalID}, this.getLastEventStringOperationCompleted, userState);
        }
        
        private void OngetLastEventStringOperationCompleted(object arg) {
            if ((this.getLastEventStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLastEventStringCompleted(this, new getLastEventStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsInOut", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet retrieveEventsInOut(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            object[] results = this.Invoke("retrieveEventsInOut", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventsInOutAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            this.retrieveEventsInOutAsync(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void retrieveEventsInOutAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.retrieveEventsInOutOperationCompleted == null)) {
                this.retrieveEventsInOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventsInOutOperationCompleted);
            }
            this.InvokeAsync("retrieveEventsInOut", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.retrieveEventsInOutOperationCompleted, userState);
        }
        
        private void OnretrieveEventsInOutOperationCompleted(object arg) {
            if ((this.retrieveEventsInOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventsInOutCompleted(this, new retrieveEventsInOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/retrieveEventsInOutString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string retrieveEventsInOutString(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            object[] results = this.Invoke("retrieveEventsInOutString", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void retrieveEventsInOutStringAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs) {
            this.retrieveEventsInOutStringAsync(UserName, Password, PhysicalID, Events, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void retrieveEventsInOutStringAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    string Events, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.retrieveEventsInOutStringOperationCompleted == null)) {
                this.retrieveEventsInOutStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretrieveEventsInOutStringOperationCompleted);
            }
            this.InvokeAsync("retrieveEventsInOutString", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Events,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.retrieveEventsInOutStringOperationCompleted, userState);
        }
        
        private void OnretrieveEventsInOutStringOperationCompleted(object arg) {
            if ((this.retrieveEventsInOutStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retrieveEventsInOutStringCompleted(this, new retrieveEventsInOutStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getItineraryData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getItineraryData(string UserName, string Password) {
            object[] results = this.Invoke("getItineraryData", new object[] {
                        UserName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getItineraryDataAsync(string UserName, string Password) {
            this.getItineraryDataAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void getItineraryDataAsync(string UserName, string Password, object userState) {
            if ((this.getItineraryDataOperationCompleted == null)) {
                this.getItineraryDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetItineraryDataOperationCompleted);
            }
            this.InvokeAsync("getItineraryData", new object[] {
                        UserName,
                        Password}, this.getItineraryDataOperationCompleted, userState);
        }
        
        private void OngetItineraryDataOperationCompleted(object arg) {
            if ((this.getItineraryDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getItineraryDataCompleted(this, new getItineraryDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SNA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SNA(string UserName, string Password) {
            object[] results = this.Invoke("SNA", new object[] {
                        UserName,
                        Password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SNAAsync(string UserName, string Password) {
            this.SNAAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void SNAAsync(string UserName, string Password, object userState) {
            if ((this.SNAOperationCompleted == null)) {
                this.SNAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSNAOperationCompleted);
            }
            this.InvokeAsync("SNA", new object[] {
                        UserName,
                        Password}, this.SNAOperationCompleted, userState);
        }
        
        private void OnSNAOperationCompleted(object arg) {
            if ((this.SNACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SNACompleted(this, new SNACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RKH", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RKH(string UserName, string Password, string PhysicalID, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int InitialSecs, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute, int FinalSecs) {
            object[] results = this.Invoke("RKH", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RKHAsync(string UserName, string Password, string PhysicalID, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int InitialSecs, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute, int FinalSecs) {
            this.RKHAsync(UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void RKHAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.RKHOperationCompleted == null)) {
                this.RKHOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRKHOperationCompleted);
            }
            this.InvokeAsync("RKH", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.RKHOperationCompleted, userState);
        }
        
        private void OnRKHOperationCompleted(object arg) {
            if ((this.RKHCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RKHCompleted(this, new RKHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getVirtualPointByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getVirtualPointByUser(string UserName, string Password) {
            object[] results = this.Invoke("getVirtualPointByUser", new object[] {
                        UserName,
                        Password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVirtualPointByUserAsync(string UserName, string Password) {
            this.getVirtualPointByUserAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void getVirtualPointByUserAsync(string UserName, string Password, object userState) {
            if ((this.getVirtualPointByUserOperationCompleted == null)) {
                this.getVirtualPointByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVirtualPointByUserOperationCompleted);
            }
            this.InvokeAsync("getVirtualPointByUser", new object[] {
                        UserName,
                        Password}, this.getVirtualPointByUserOperationCompleted, userState);
        }
        
        private void OngetVirtualPointByUserOperationCompleted(object arg) {
            if ((this.getVirtualPointByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVirtualPointByUserCompleted(this, new getVirtualPointByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getVirtualPointEvents", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getVirtualPointEvents(string UserName, string Password, string PhysicalID, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int InitialSecs, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute, int FinalSecs) {
            object[] results = this.Invoke("getVirtualPointEvents", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getVirtualPointEventsAsync(string UserName, string Password, string PhysicalID, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int InitialSecs, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute, int FinalSecs) {
            this.getVirtualPointEventsAsync(UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void getVirtualPointEventsAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.getVirtualPointEventsOperationCompleted == null)) {
                this.getVirtualPointEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVirtualPointEventsOperationCompleted);
            }
            this.InvokeAsync("getVirtualPointEvents", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.getVirtualPointEventsOperationCompleted, userState);
        }
        
        private void OngetVirtualPointEventsOperationCompleted(object arg) {
            if ((this.getVirtualPointEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVirtualPointEventsCompleted(this, new getVirtualPointEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setMDTMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool setMDTMessage(string UserName, string Password, string PhysicalID, string Message, string MessageCode) {
            object[] results = this.Invoke("setMDTMessage", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Message,
                        MessageCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void setMDTMessageAsync(string UserName, string Password, string PhysicalID, string Message, string MessageCode) {
            this.setMDTMessageAsync(UserName, Password, PhysicalID, Message, MessageCode, null);
        }
        
        /// <remarks/>
        public void setMDTMessageAsync(string UserName, string Password, string PhysicalID, string Message, string MessageCode, object userState) {
            if ((this.setMDTMessageOperationCompleted == null)) {
                this.setMDTMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetMDTMessageOperationCompleted);
            }
            this.InvokeAsync("setMDTMessage", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        Message,
                        MessageCode}, this.setMDTMessageOperationCompleted, userState);
        }
        
        private void OnsetMDTMessageOperationCompleted(object arg) {
            if ((this.setMDTMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setMDTMessageCompleted(this, new setMDTMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SIR_InformePosicionesGeograficas", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SIR_InformePosicionesGeograficas(string UserName, string Password, int TipoTrama, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute) {
            object[] results = this.Invoke("SIR_InformePosicionesGeograficas", new object[] {
                        UserName,
                        Password,
                        TipoTrama,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SIR_InformePosicionesGeograficasAsync(string UserName, string Password, int TipoTrama, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute) {
            this.SIR_InformePosicionesGeograficasAsync(UserName, Password, TipoTrama, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, null);
        }
        
        /// <remarks/>
        public void SIR_InformePosicionesGeograficasAsync(string UserName, string Password, int TipoTrama, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute, object userState) {
            if ((this.SIR_InformePosicionesGeograficasOperationCompleted == null)) {
                this.SIR_InformePosicionesGeograficasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSIR_InformePosicionesGeograficasOperationCompleted);
            }
            this.InvokeAsync("SIR_InformePosicionesGeograficas", new object[] {
                        UserName,
                        Password,
                        TipoTrama,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute}, this.SIR_InformePosicionesGeograficasOperationCompleted, userState);
        }
        
        private void OnSIR_InformePosicionesGeograficasOperationCompleted(object arg) {
            if ((this.SIR_InformePosicionesGeograficasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SIR_InformePosicionesGeograficasCompleted(this, new SIR_InformePosicionesGeograficasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKilometer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetKilometer(string UserName, string Password, string PhysicalID, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int InitialSecs, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute, int FinalSecs) {
            object[] results = this.Invoke("GetKilometer", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetKilometerAsync(string UserName, string Password, string PhysicalID, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int InitialSecs, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute, int FinalSecs) {
            this.GetKilometerAsync(UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void GetKilometerAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.GetKilometerOperationCompleted == null)) {
                this.GetKilometerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKilometerOperationCompleted);
            }
            this.InvokeAsync("GetKilometer", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.GetKilometerOperationCompleted, userState);
        }
        
        private void OnGetKilometerOperationCompleted(object arg) {
            if ((this.GetKilometerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKilometerCompleted(this, new GetKilometerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKilometerString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKilometerString(string UserName, string Password, string PhysicalID, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int InitialSecs, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute, int FinalSecs) {
            object[] results = this.Invoke("GetKilometerString", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKilometerStringAsync(string UserName, string Password, string PhysicalID, int InitialYear, int InitialMonth, int InitialDay, int InitialHour, int InitialMinute, int InitialSecs, int FinalYear, int FinalMonth, int FinalDay, int FinalHour, int FinalMinute, int FinalSecs) {
            this.GetKilometerStringAsync(UserName, Password, PhysicalID, InitialYear, InitialMonth, InitialDay, InitialHour, InitialMinute, InitialSecs, FinalYear, FinalMonth, FinalDay, FinalHour, FinalMinute, FinalSecs, null);
        }
        
        /// <remarks/>
        public void GetKilometerStringAsync(
                    string UserName, 
                    string Password, 
                    string PhysicalID, 
                    int InitialYear, 
                    int InitialMonth, 
                    int InitialDay, 
                    int InitialHour, 
                    int InitialMinute, 
                    int InitialSecs, 
                    int FinalYear, 
                    int FinalMonth, 
                    int FinalDay, 
                    int FinalHour, 
                    int FinalMinute, 
                    int FinalSecs, 
                    object userState) {
            if ((this.GetKilometerStringOperationCompleted == null)) {
                this.GetKilometerStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKilometerStringOperationCompleted);
            }
            this.InvokeAsync("GetKilometerString", new object[] {
                        UserName,
                        Password,
                        PhysicalID,
                        InitialYear,
                        InitialMonth,
                        InitialDay,
                        InitialHour,
                        InitialMinute,
                        InitialSecs,
                        FinalYear,
                        FinalMonth,
                        FinalDay,
                        FinalHour,
                        FinalMinute,
                        FinalSecs}, this.GetKilometerStringOperationCompleted, userState);
        }
        
        private void OnGetKilometerStringOperationCompleted(object arg) {
            if ((this.GetKilometerStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKilometerStringCompleted(this, new GetKilometerStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKilometerCurrentDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetKilometerCurrentDate(string UserName, string Password, string Filter, string Value) {
            object[] results = this.Invoke("GetKilometerCurrentDate", new object[] {
                        UserName,
                        Password,
                        Filter,
                        Value});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetKilometerCurrentDateAsync(string UserName, string Password, string Filter, string Value) {
            this.GetKilometerCurrentDateAsync(UserName, Password, Filter, Value, null);
        }
        
        /// <remarks/>
        public void GetKilometerCurrentDateAsync(string UserName, string Password, string Filter, string Value, object userState) {
            if ((this.GetKilometerCurrentDateOperationCompleted == null)) {
                this.GetKilometerCurrentDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKilometerCurrentDateOperationCompleted);
            }
            this.InvokeAsync("GetKilometerCurrentDate", new object[] {
                        UserName,
                        Password,
                        Filter,
                        Value}, this.GetKilometerCurrentDateOperationCompleted, userState);
        }
        
        private void OnGetKilometerCurrentDateOperationCompleted(object arg) {
            if ((this.GetKilometerCurrentDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKilometerCurrentDateCompleted(this, new GetKilometerCurrentDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKilometerCurrentDateString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKilometerCurrentDateString(string UserName, string Password, string Filter, string Value) {
            object[] results = this.Invoke("GetKilometerCurrentDateString", new object[] {
                        UserName,
                        Password,
                        Filter,
                        Value});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKilometerCurrentDateStringAsync(string UserName, string Password, string Filter, string Value) {
            this.GetKilometerCurrentDateStringAsync(UserName, Password, Filter, Value, null);
        }
        
        /// <remarks/>
        public void GetKilometerCurrentDateStringAsync(string UserName, string Password, string Filter, string Value, object userState) {
            if ((this.GetKilometerCurrentDateStringOperationCompleted == null)) {
                this.GetKilometerCurrentDateStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKilometerCurrentDateStringOperationCompleted);
            }
            this.InvokeAsync("GetKilometerCurrentDateString", new object[] {
                        UserName,
                        Password,
                        Filter,
                        Value}, this.GetKilometerCurrentDateStringOperationCompleted, userState);
        }
        
        private void OnGetKilometerCurrentDateStringOperationCompleted(object arg) {
            if ((this.GetKilometerCurrentDateStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKilometerCurrentDateStringCompleted(this, new GetKilometerCurrentDateStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegionesByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRegionesByUser(string UserName, string Password) {
            object[] results = this.Invoke("GetRegionesByUser", new object[] {
                        UserName,
                        Password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRegionesByUserAsync(string UserName, string Password) {
            this.GetRegionesByUserAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetRegionesByUserAsync(string UserName, string Password, object userState) {
            if ((this.GetRegionesByUserOperationCompleted == null)) {
                this.GetRegionesByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegionesByUserOperationCompleted);
            }
            this.InvokeAsync("GetRegionesByUser", new object[] {
                        UserName,
                        Password}, this.GetRegionesByUserOperationCompleted, userState);
        }
        
        private void OnGetRegionesByUserOperationCompleted(object arg) {
            if ((this.GetRegionesByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegionesByUserCompleted(this, new GetRegionesByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegionesByUserString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRegionesByUserString(string UserName, string Password) {
            object[] results = this.Invoke("GetRegionesByUserString", new object[] {
                        UserName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRegionesByUserStringAsync(string UserName, string Password) {
            this.GetRegionesByUserStringAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetRegionesByUserStringAsync(string UserName, string Password, object userState) {
            if ((this.GetRegionesByUserStringOperationCompleted == null)) {
                this.GetRegionesByUserStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegionesByUserStringOperationCompleted);
            }
            this.InvokeAsync("GetRegionesByUserString", new object[] {
                        UserName,
                        Password}, this.GetRegionesByUserStringOperationCompleted, userState);
        }
        
        private void OnGetRegionesByUserStringOperationCompleted(object arg) {
            if ((this.GetRegionesByUserStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegionesByUserStringCompleted(this, new GetRegionesByUserStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVehiclesByRegiones", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetVehiclesByRegiones(string UserName, string Password, string Region) {
            object[] results = this.Invoke("GetVehiclesByRegiones", new object[] {
                        UserName,
                        Password,
                        Region});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetVehiclesByRegionesAsync(string UserName, string Password, string Region) {
            this.GetVehiclesByRegionesAsync(UserName, Password, Region, null);
        }
        
        /// <remarks/>
        public void GetVehiclesByRegionesAsync(string UserName, string Password, string Region, object userState) {
            if ((this.GetVehiclesByRegionesOperationCompleted == null)) {
                this.GetVehiclesByRegionesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVehiclesByRegionesOperationCompleted);
            }
            this.InvokeAsync("GetVehiclesByRegiones", new object[] {
                        UserName,
                        Password,
                        Region}, this.GetVehiclesByRegionesOperationCompleted, userState);
        }
        
        private void OnGetVehiclesByRegionesOperationCompleted(object arg) {
            if ((this.GetVehiclesByRegionesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVehiclesByRegionesCompleted(this, new GetVehiclesByRegionesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVehiclesByRegionesString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVehiclesByRegionesString(string UserName, string Password, string Region) {
            object[] results = this.Invoke("GetVehiclesByRegionesString", new object[] {
                        UserName,
                        Password,
                        Region});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVehiclesByRegionesStringAsync(string UserName, string Password, string Region) {
            this.GetVehiclesByRegionesStringAsync(UserName, Password, Region, null);
        }
        
        /// <remarks/>
        public void GetVehiclesByRegionesStringAsync(string UserName, string Password, string Region, object userState) {
            if ((this.GetVehiclesByRegionesStringOperationCompleted == null)) {
                this.GetVehiclesByRegionesStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVehiclesByRegionesStringOperationCompleted);
            }
            this.InvokeAsync("GetVehiclesByRegionesString", new object[] {
                        UserName,
                        Password,
                        Region}, this.GetVehiclesByRegionesStringOperationCompleted, userState);
        }
        
        private void OnGetVehiclesByRegionesStringOperationCompleted(object arg) {
            if ((this.GetVehiclesByRegionesStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVehiclesByRegionesStringCompleted(this, new GetVehiclesByRegionesStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerPointByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCustomerPointByUser(string UserName, string Password) {
            object[] results = this.Invoke("GetCustomerPointByUser", new object[] {
                        UserName,
                        Password});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerPointByUserAsync(string UserName, string Password) {
            this.GetCustomerPointByUserAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetCustomerPointByUserAsync(string UserName, string Password, object userState) {
            if ((this.GetCustomerPointByUserOperationCompleted == null)) {
                this.GetCustomerPointByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerPointByUserOperationCompleted);
            }
            this.InvokeAsync("GetCustomerPointByUser", new object[] {
                        UserName,
                        Password}, this.GetCustomerPointByUserOperationCompleted, userState);
        }
        
        private void OnGetCustomerPointByUserOperationCompleted(object arg) {
            if ((this.GetCustomerPointByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerPointByUserCompleted(this, new GetCustomerPointByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerPointByUserString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerPointByUserString(string UserName, string Password) {
            object[] results = this.Invoke("GetCustomerPointByUserString", new object[] {
                        UserName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerPointByUserStringAsync(string UserName, string Password) {
            this.GetCustomerPointByUserStringAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetCustomerPointByUserStringAsync(string UserName, string Password, object userState) {
            if ((this.GetCustomerPointByUserStringOperationCompleted == null)) {
                this.GetCustomerPointByUserStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerPointByUserStringOperationCompleted);
            }
            this.InvokeAsync("GetCustomerPointByUserString", new object[] {
                        UserName,
                        Password}, this.GetCustomerPointByUserStringOperationCompleted, userState);
        }
        
        private void OnGetCustomerPointByUserStringOperationCompleted(object arg) {
            if ((this.GetCustomerPointByUserStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerPointByUserStringCompleted(this, new GetCustomerPointByUserStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CrearRegionDinamicas", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CrearRegionDinamicas(string userName, string password, string nombre, string codigoCliente, decimal longitud, decimal latitud, float tamano, string descripcion, string direccion, int tipoRestriccion, int cantidadDias, string placas) {
            object[] results = this.Invoke("CrearRegionDinamicas", new object[] {
                        userName,
                        password,
                        nombre,
                        codigoCliente,
                        longitud,
                        latitud,
                        tamano,
                        descripcion,
                        direccion,
                        tipoRestriccion,
                        cantidadDias,
                        placas});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CrearRegionDinamicasAsync(string userName, string password, string nombre, string codigoCliente, decimal longitud, decimal latitud, float tamano, string descripcion, string direccion, int tipoRestriccion, int cantidadDias, string placas) {
            this.CrearRegionDinamicasAsync(userName, password, nombre, codigoCliente, longitud, latitud, tamano, descripcion, direccion, tipoRestriccion, cantidadDias, placas, null);
        }
        
        /// <remarks/>
        public void CrearRegionDinamicasAsync(string userName, string password, string nombre, string codigoCliente, decimal longitud, decimal latitud, float tamano, string descripcion, string direccion, int tipoRestriccion, int cantidadDias, string placas, object userState) {
            if ((this.CrearRegionDinamicasOperationCompleted == null)) {
                this.CrearRegionDinamicasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCrearRegionDinamicasOperationCompleted);
            }
            this.InvokeAsync("CrearRegionDinamicas", new object[] {
                        userName,
                        password,
                        nombre,
                        codigoCliente,
                        longitud,
                        latitud,
                        tamano,
                        descripcion,
                        direccion,
                        tipoRestriccion,
                        cantidadDias,
                        placas}, this.CrearRegionDinamicasOperationCompleted, userState);
        }
        
        private void OnCrearRegionDinamicasOperationCompleted(object arg) {
            if ((this.CrearRegionDinamicasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CrearRegionDinamicasCompleted(this, new CrearRegionDinamicasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlarms", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAlarms(string UserName, string Password, string AttentionType) {
            object[] results = this.Invoke("GetAlarms", new object[] {
                        UserName,
                        Password,
                        AttentionType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAlarmsAsync(string UserName, string Password, string AttentionType) {
            this.GetAlarmsAsync(UserName, Password, AttentionType, null);
        }
        
        /// <remarks/>
        public void GetAlarmsAsync(string UserName, string Password, string AttentionType, object userState) {
            if ((this.GetAlarmsOperationCompleted == null)) {
                this.GetAlarmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAlarmsOperationCompleted);
            }
            this.InvokeAsync("GetAlarms", new object[] {
                        UserName,
                        Password,
                        AttentionType}, this.GetAlarmsOperationCompleted, userState);
        }
        
        private void OnGetAlarmsOperationCompleted(object arg) {
            if ((this.GetAlarmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAlarmsCompleted(this, new GetAlarmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventsCompletedEventHandler(object sender, retrieveEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventsV2CompletedEventHandler(object sender, retrieveEventsV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventsV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventsV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventsV3CompletedEventHandler(object sender, retrieveEventsV3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventsV3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventsV3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventStringCompletedEventHandler(object sender, retrieveEventStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventStringV2CompletedEventHandler(object sender, retrieveEventStringV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventStringV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventStringV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventStringV3CompletedEventHandler(object sender, retrieveEventStringV3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventStringV3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventStringV3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventStringByIDV4CompletedEventHandler(object sender, retrieveEventStringByIDV4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventStringByIDV4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventStringByIDV4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventsByIDCompletedEventHandler(object sender, retrieveEventsByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventsByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventsByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventsByIDV2CompletedEventHandler(object sender, retrieveEventsByIDV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventsByIDV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventsByIDV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventsByIDV3CompletedEventHandler(object sender, retrieveEventsByIDV3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventsByIDV3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventsByIDV3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getLastEventCompletedEventHandler(object sender, getLastEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getLastEventStringCompletedEventHandler(object sender, getLastEventStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLastEventStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLastEventStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventsInOutCompletedEventHandler(object sender, retrieveEventsInOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventsInOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventsInOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void retrieveEventsInOutStringCompletedEventHandler(object sender, retrieveEventsInOutStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retrieveEventsInOutStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retrieveEventsInOutStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getItineraryDataCompletedEventHandler(object sender, getItineraryDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getItineraryDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getItineraryDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SNACompletedEventHandler(object sender, SNACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SNACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SNACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RKHCompletedEventHandler(object sender, RKHCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RKHCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RKHCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getVirtualPointByUserCompletedEventHandler(object sender, getVirtualPointByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVirtualPointByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVirtualPointByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void getVirtualPointEventsCompletedEventHandler(object sender, getVirtualPointEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVirtualPointEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVirtualPointEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void setMDTMessageCompletedEventHandler(object sender, setMDTMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setMDTMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setMDTMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SIR_InformePosicionesGeograficasCompletedEventHandler(object sender, SIR_InformePosicionesGeograficasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SIR_InformePosicionesGeograficasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SIR_InformePosicionesGeograficasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetKilometerCompletedEventHandler(object sender, GetKilometerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKilometerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKilometerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetKilometerStringCompletedEventHandler(object sender, GetKilometerStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKilometerStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKilometerStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetKilometerCurrentDateCompletedEventHandler(object sender, GetKilometerCurrentDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKilometerCurrentDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKilometerCurrentDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetKilometerCurrentDateStringCompletedEventHandler(object sender, GetKilometerCurrentDateStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKilometerCurrentDateStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKilometerCurrentDateStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetRegionesByUserCompletedEventHandler(object sender, GetRegionesByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegionesByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegionesByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetRegionesByUserStringCompletedEventHandler(object sender, GetRegionesByUserStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegionesByUserStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegionesByUserStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetVehiclesByRegionesCompletedEventHandler(object sender, GetVehiclesByRegionesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVehiclesByRegionesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVehiclesByRegionesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetVehiclesByRegionesStringCompletedEventHandler(object sender, GetVehiclesByRegionesStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVehiclesByRegionesStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVehiclesByRegionesStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetCustomerPointByUserCompletedEventHandler(object sender, GetCustomerPointByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerPointByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerPointByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetCustomerPointByUserStringCompletedEventHandler(object sender, GetCustomerPointByUserStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerPointByUserStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerPointByUserStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CrearRegionDinamicasCompletedEventHandler(object sender, CrearRegionDinamicasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CrearRegionDinamicasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CrearRegionDinamicasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetAlarmsCompletedEventHandler(object sender, GetAlarmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAlarmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAlarmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591